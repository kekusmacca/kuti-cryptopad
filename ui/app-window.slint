import { Button, VerticalBox, TextEdit, LineEdit, HorizontalBox } from "std-widgets.slint";

// Define a custom enum
export enum FileStreamState { none, new, save_current, save_as, open }

export component AppWindow inherits Window {
    in-out property <string> status: "Ready";
    in-out property <string> file_path: "";
    property <string> pass_key: "";
    in property <string> contents <=> txt_contents.text;
    property <FileStreamState> fs_state: none;
   
    
    callback request-increase-value();
    callback open-file-dialog();
    callback save-as-dialog(string);
    callback save-current(string);
    callback decrypt-contents(string);

    // Settings for the main window
    width: 600px;
    height: 800px;
    padding: 10px;
    
    public function update_status(value: string) {
        status = value;
    }

    public function show_popup(){
        popup.show();
    }

    // Function to handle the file stream state
    // This function will be called when the user clicks on the save or open button
    function handle_fs_state(){
        if(fs_state == FileStreamState.save_as) {
            save-as-dialog(pass_key); 
        } else if (fs_state == FileStreamState.open) {
            decrypt-contents(pass_key);
        }
    }

    // TODO: Add another popup for passkey verfication on file create
    popup := PopupWindow {   
            height: 150px;
            width: 300px;
            x: (root.width - self.width) / 2;
            y: (root.height - self.height) / 2;
            close-on-click: false;
            Rectangle { height:100%; width: 100%; background:#292a2b; border-width: 1px; border-color: #691313;}
            VerticalBox {
                padding: 10px;
                spacing: 10px;

                Text {
                    text: "Enter Pass Key";
                    font-size: 24px;
                    color: white;
                }

                txt_passkey := LineEdit {
                    
                    text: "";
                    input-type: password;
                    
                    accepted => {
                        root.pass_key = txt_passkey.text;
                        root.handle_fs_state();
                        popup.close();
                        fs_state = FileStreamState.none;
                    }
                    
                }

                HorizontalBox {
                    Button { 
                        text: "Cancel"; 
                        clicked => { 
                            popup.close();
                            fs_state = FileStreamState.none;
                        }
                    }
                    Button { 
                        text: "OK"; 
                        clicked => { 
                            root.pass_key = txt_passkey.text;
                            root.handle_fs_state();
                            popup.close();
                            fs_state = FileStreamState.none;
                        }
                    }
                }            
            }  
        }

    
    VerticalBox {
        Text {
            text: "Path: \{root.file_path}";
        }

        Text {
            text: "Status: \{root.status}";
        }

        HorizontalBox {
        Button {
            text: "Open";
            clicked => {
                root.fs_state = FileStreamState.open;
                root.open-file-dialog();
            }
        }
        Button {
            text: "Save";
            clicked => {
                if(root.file_path == "") {
                    fs_state = FileStreamState.save_as;
                    popup.show();
                } else {
                    root.save-current(root.pass_key );
                }
            }
        }
        Button {
            text: "Save As...";
            clicked => {
                root.fs_state = FileStreamState.save_as;
                popup.show();
            }
        }
    }
        txt_contents := TextEdit {
            font-size: 14px;
            edited => {
                root.status = "Edited";
            }
        }
    }
}
